{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint",
    "plugin:prettier/recommended",
    "plugin:react/recommended",
    "plugin:jest/recommended"
  ],
  "plugins": ["@typescript-eslint", "no-loops", "better-styled-components"],
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "env": {
    "browser": true,
    "es6": true,
    "jest": true
  },
  "rules": {
    "arrow-body-style": 2,
    "better-styled-components/sort-declarations-alphabetically": 2,
    "comma-dangle": [2, "only-multiline"],
    "curly": 2,
    "eol-last": [2, "always"],
    "eqeqeq": [2, "always"],
    "guard-for-in": 2,

    "import/prefer-default-export": ["off"],
    "jest/no-disabled-tests": "warn",
    "jest/no-focused-tests": 2,
    "jest/no-identical-title": 2,
    "jest/prefer-to-have-length": "warn",
    "jest/valid-expect": 2,
    "no-labels": 2,
    "linebreak-style": [2, "unix"],
    "max-len": [
      2,
      {
        "code": 80,
        "tabWidth": 2,
        "comments": 80,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "max-lines": [
      2,
      {
        "max": 300,
        "skipBlankLines": true
      }
    ],
    "@typescript-eslint/member-ordering": [
      2,
      {
        "default": ["signature", "constructor", "method", "field"]
      }
    ],
    "no-caller": 2,
    "no-bitwise": 2,
    "no-multiple-empty-lines": 2,
    "no-console": 2,
    "no-debugger": 2,
    "no-empty": 2,
    "no-eval": 2,
    "no-loops/no-loops": 2,
    "no-new-func": 2,
    "no-eq-null": 2,
    "no-shadow": 2,
    "no-octal-escape": 2,
    "no-invalid-regexp": 2,
    "no-fallthrough": 2,
    "no-trailing-spaces": 2,
    "no-extra-label": 2,
    "no-unused-expressions": 2,
    "no-var": 2,
    "no-implicit-coercion": 2,
    "object-curly-spacing": 0,
    "object-literal-sort-keys": 0,
    "prefer-const": 2,
    "quotes": [2, "single"],
    "radix": 2,
    "react/no-unescaped-entities": [
      2,
      {
        "forbid": [{
            "char": ">",
            "alternatives": ["&gt;"]
          },
          {
            "char": "}",
            "alternatives": ["&#125;"]
          }
        ]
      }
    ],
    "require-await": 2,
    "semi": [2, "always"],
    "sort-imports": [
      2,
      {
        "ignoreCase": true
      }
    ],
    "sort-keys": [
      2,
      "asc",
      {
        "caseSensitive": true,
        "natural": false,
        "minKeys": 2
      }
    ],
    "spaced-comment": [
      2,
      "always",
      {
        "line": {
          "markers": ["/"],
          "exceptions": ["-", "+"]
        },
        "block": {
          "markers": ["!"],
          "exceptions": ["*"],
          "balanced": true
        }
      }
    ],
    "@typescript-eslint/unified-signatures": 2,
    "valid-typeof": 2,
    "variable-name": 0,
    "@typescript-eslint/explicit-function-return-type": ["off"],
    "@typescript-eslint/explicit-member-accessibility": [
      2,
      {
        "accessibility": "explicit",
        "overrides": {
          "constructors": "no-public"
        }
      }
    ],
    "@typescript-eslint/naming-convention": [
      2,
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "variableLike",
        "format": ["camelCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "format": ["camelCase"]
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "enum",
        "format": ["UPPER_CASE", "PascalCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase", "camelCase"],
        "custom": {
          "regex": "^I[A-Z][A-Z]",
          "match": false
        }
      }
    ]
  }
}